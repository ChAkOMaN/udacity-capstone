version: 2.1

commands: 
  install-awscli:
    description: Install awscli tools
    steps:
      - run: 
          name: Install awscli
          command: |    
            apk update && apk add --update tar gzip curl      
            pip install --upgrade awscli
            aws --version

  install-eksctl:
    description: Install eksctl tools
    steps:
      - run: 
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            
  install-kubectl:
    description: Install kubectl tools
    steps:
      - run: 
          name: Install kubectl
          command: |           
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

  destroy-environment:
    description: Destroy EKS cluster.    
    steps:
      - run:
          name: Destroy cluster
          when: on_fail
          command: |
            eksctl delete cluster --name=capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7} --region=us-east-1          

jobs:
  lint-code:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  build-docker:
    docker:
      - image: docker:latest
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dependencies
          command: |
            apk update && apk add bash      
      - run:
          name: build docker image
          command: |
            bash build_docker.sh
      - run:
          name: push docker image
          command: |
            bash push_docker.sh

  deploy-eks:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-awscli
      - install-eksctl
      - install-kubectl
      - run:
          name: create aws eks cluster
          command: |
            aws sts get-caller-identity
            eksctl create cluster --name capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7} --region=us-east-1 --zones us-east-1a,us-east-1b,us-east-1c,us-east-1d
            eksctl utils describe-stacks --region=us-east-1 --cluster=capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7}
            eksctl get cluster --name=capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7} --region=us-east-1
      - run:
          name: deploy app init
          command: |
            kubectl get nodes
            kubectl create deployment udacity-capstone --image=chakoman/udacity-capstone &&
              kubectl expose deployment/udacity-capstone --type="LoadBalancer" --name=udacity-capstone-init --port 80
            sleep 1m            
      - run:
          name: deploy app final
          command: |
            kubectl get nodes
            kubectl create deployment udacity-capstone-final --image=chakoman/udacity-capstone-final &&
              kubectl expose deployment/udacity-capstone-final --type="LoadBalancer" --name=udacity-capstone-final --port 80
            sleep 1m 
            kubectl get deployments,rs,svc,pods        
      - run:
          name: store app's endpoint
          command: |
            kubectl get services
            api=$(kubectl get services udacity-capstone-init --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo $api >> app-init-endpoint.txt
            cat app-init-endpoint.txt
            api=$(kubectl get services udacity-capstone-final --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo $api >> app-final-endpoint.txt
            cat app-final-endpoint.txt            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/files/app-init-endpoint.txt  
            - project/.circleci/files/app-final-endpoint.txt              
      #- destroy-environment

  app-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-awscli
      - install-kubectl
      - run:
          name: store app's endpoint
          command: |
            aws eks update-kubeconfig --name capstone-eks-cluster-e51ed24 --region=us-east-1
            #kubectl get services
            api1=$(kubectl get services udacity-capstone-init --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo $api1 >> .circleci/files/app-init-endpoint.txt            
            cat .circleci/files/app-init-endpoint.txt
            api2=$(kubectl get services udacity-capstone-final --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo $api2 >> .circleci/files/app-final-endpoint.txt
            cat .circleci/files/app-final-endpoint.txt            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/files/app-init-endpoint.txt  
            - project/.circleci/files/app-final-endpoint.txt           

  app-smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/      
      - install-awscli

      - run:
          name: Smoke test.
          command: |
            cd .circleci/files          
            export APP_INIT_IP=$(cat app-init-endpoint.txt)
            export APP_FINAL_IP=$(cat app-final-endpoint.txt)
            echo ${APP_INIT_IP} 
            echo ${APP_FINAL_IP} 
            if (curl "http://${APP_INIT_IP}" | grep "Hello" && curl "http://${APP_FINAL_IP}" | grep "Reloaded")
            then
              return 0
            else
              return 1
            fi              
      #- destroy-environment        

  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-awscli
      - install-kubectl
      - run:
          name: Delete old service and deployment
          command: |
            aws eks update-kubeconfig --name capstone-eks-cluster-e51ed24 --region=us-east-1
            kubectl get services
            kubectl get deployment
            #kubectl delete service udacity-capstone-init
            kubectl delete deployment udacity-capstone-init

workflows:
  deployment:
    jobs:
      # - lint-code
      # - build-docker:
      #     requires: [lint-code]
      # - deploy-eks:
      #     requires: [build-docker]
      # - app-smoke-test:   
      #     requires: [deploy-eks]
      # - app-test
      # - app-smoke-test:
      #       requires: [app-test]
      - cleanup