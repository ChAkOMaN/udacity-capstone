version: 2.1

commands: 
  install-awscli:
    description: Install awscli tools
    steps:
      - run: 
          name: Install awscli
          command: |    
            apk update && apk add --update tar gzip curl      
            pip install --upgrade awscli
            aws --version

  install-eksctl:
    description: Install eksctl tools
    steps:
      - run: 
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            
  install-kubectl:
    description: Install kubectl tools
    steps:
      - run: 
          name: Install kubectl
          command: |           
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

  destroy-environment:
    description: Destroy EKS cluster.    
    steps:
      - run:
          name: Destroy cluster
          when: on_fail
          command: |
            eksctl delete cluster --name=capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7} --region=us-east-1          

jobs:
  lint-code:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  build-docker:
    docker:
      - image: docker:latest
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dependencies
          command: |
            apk update && apk add bash      
      - run:
          name: build docker image
          command: |
            bash build_docker.sh
      - run:
          name: push docker image
          command: |
            bash push_docker.sh

  deploy-eks:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-awscli
      - install-eksctl
      - install-kubectl
      - run:
          name: create aws eks cluster
          command: |
            aws sts get-caller-identity
            eksctl create cluster --name capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7} --region=us-east-1 --zones us-east-1a,us-east-1b,us-east-1c,us-east-1d
            eksctl utils describe-stacks --region=us-east-1 --cluster=capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7}
            eksctl get cluster --name=capstone-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7} --region=us-east-1
      - run:
          name: deploy app
          command: |
            kubectl get nodes
            kubectl create deployment udacity-capstone --image=chakoman/udacity-capstone &&
              kubectl expose deployment/udacity-capstone --type="LoadBalancer" --port 80
            kubectl get deployments,rs,svc,pods
      - destroy-environment

  app-smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-awscli
      - install-eksctl
      - install-kubectl
      - run:
          name: smoke-test
          command: |
            kubectl get nodes
            kubectl get deployments,rs,svc,pods
            kubectl get svc -o jsonpath='{$.items[*].status.loadBalancer}' | cut -b 26-68
            kubectl get svc -o custom-columns="NAME:.metadata.name,IP ADDRESS:.status.loadBalancer.ingress[*].ip"    
      - destroy-environment

  rolling-deployment-eks:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install-awscli
      - install-eksctl
      - install-kubectl
      - run:
          name: rolling-deployment
          command: |  
            kubectl rollout restart deployment udacity-capstone
            kubectl rollout history deployment/capstone
            kubectl get nodes
            kubectl get deployments,rs,svc,pods    
            kubectl get svc -o jsonpath='{ $.items[*].status.loadBalancer}' | cut -b 26-68        
      - destroy-environment                    

workflows:
  deployment:
    jobs:
      - lint-code
      - build-docker:
          requires: [lint-code]
      - deploy-eks:
          requires: [build-docker]
      - app-smoke-test:   
          requires: [deploy-eks]
      - rolling-deployment-eks:   
          requires: [app-smoke-test]